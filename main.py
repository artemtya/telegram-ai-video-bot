import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ContentType
from aiogram.types import user
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp
import os
from time import time

from models import Base, User, Upload, VideoTask, ProcessingStyle, TaskStatus, TaskImage
from session import engine, async_session
from config import SD_API_URL, STYLES

from sqlalchemy import select, delete, insert, update
from sqlalchemy.exc import NoResultFound, IntegrityError

from ai_processing import generate_ai_video

from config import BOT_TOKEN

from aiogram.types import InputFile

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN)
scheduler = AsyncIOScheduler()

# –ö—ç—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_temp_data = {}
progress_tracker = {}


@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        "4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ —á–∞—Å–∞ –ø–æ–∫–∞ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ!\n\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
    )
    await message.answer(help_text)


@dp.message(Command("info"))
async def info_command(message: types.Message):
    info_text = (
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∞—à–∏ —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö "
        "—Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Stable Diffusion, Python, AIogram\n"
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç."
    )
    await message.answer(info_text)


@dp.message(Command("secure"))
async def secure_command(message: types.Message):
    secure_text = (
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "–í—Å–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram, "
        "–∏ –Ω–∏–∫—Ç–æ, –≤–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞, –Ω–µ –º–æ–∂–µ—Ç –∏—Ö —É–≤–∏–¥–µ—Ç—å.\n\n"
        "–ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–∞ —Å–≤–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö(—É –Ω–∞—Å –∏—Ö –Ω–µ—Ç:()."
    )
    await message.answer(secure_text)


@dp.message(Command("owner"))
async def owner_command(message: types.Message):
    await message.answer("–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: @artemtya")


async def get_file_url(file_id: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞ –≤ Telegram"""
    file = await bot.get_file(file_id)
    return f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"


async def download_file(url: str, path: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ URL"""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            with open(path, 'wb') as f:
                f.write(await resp.read())


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ! üì∑üé•\n\n'
        '–ó–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!'
    )


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_temp_data and user_temp_data[user_id].get("uploads"):
        await message.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    file_id = message.photo[-1].file_id

    async with async_session() as session:
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(select(User).where(User.telegram_id == user_id))
            user = user.scalar()

            if not user:
                user = User(
                    telegram_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                )
                session.add(user)
                await session.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É)
            await session.execute(delete(Upload).where(Upload.user_id == user.id))
            upload = Upload(
                user_id=user.id,
                file_id=file_id,
                is_photo="1"
            )
            session.add(upload)
            await session.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_temp_data[user_id] = {"uploads": [file_id]}

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_tracker[user_id] = {
                "start_time": None,
                "progress": 0,
                "message_id": None
            }

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            builder = ReplyKeyboardBuilder()
            builder.button(text="üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
            await message.answer(
                "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∏–¥–µ–æ. "
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ —á–∞—Å–∞.",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.text == "üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
async def select_style(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_temp_data or not user_temp_data[user_id].get("uploads"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ!")
        return

    async with async_session() as session:
        try:
            styles = await session.execute(select(ProcessingStyle))
            styles = styles.scalars().all()

            if not styles:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            builder = InlineKeyboardBuilder()
            for style in styles:
                builder.button(
                    text=style.style_name,
                    callback_data=f"style_{style.id}"
                )
            builder.adjust(2)

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–ª–µ–π: {str(e)}")


@dp.callback_query(F.data.startswith("style_"))
async def process_style_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    try:
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∏–ª—è
        try:
            style_id = int(callback.data.split("_")[1])
        except (IndexError, ValueError):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∏–ª—è!")
            return

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        if not user_temp_data.get(user_id, {}).get("uploads"):
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ!")
            return

        async with async_session() as session:
            try:
                # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª—è
                style = await session.get(ProcessingStyle, style_id)
                if not style:
                    await callback.answer("–°—Ç–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                    return

                # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = user.scalar_one_or_none()

                if not user:
                    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return

                # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                task = VideoTask(
                    user_id=user.id,
                    status_id=1,  # pending
                    style_id=style.id,
                    created_at=datetime.now()
                )
                session.add(task)
                await session.flush()

                # 6. –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π
                upload = await session.execute(
                    select(Upload)
                    .where(Upload.file_id == user_temp_data[user_id]["uploads"][0])
                    .limit(1)
                )
                upload = upload.scalar_one_or_none()

                if upload:
                    task_image = TaskImage(
                        task_id=task.id,
                        upload_id=upload.id,
                        order_index=0
                    )
                    session.add(task_image)

                await session.commit()

                # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_msg = await bot.send_message(
                    chat_id=chat_id,
                    text="üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
                progress_tracker[user_id] = {
                    "start_time": time(),
                    "progress": 0,
                    "message_id": progress_msg.message_id,
                    "task_id": task.id,
                    "chat_id": chat_id
                }

                await callback.answer(f"–°—Ç–∏–ª—å: {style.style_name}")

                # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                task.status_id = 2  # processing
                await session.commit()

                # 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
                try:
                    video_path = await generate_ai_video(
                        user_temp_data[user_id]["uploads"],
                        style.style_name.lower(),
                        bot,
                        progress_callback=lambda p: update_progress(user_id, p)
                    )

                    # 10. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                    task.status_id = 3  # completed
                    task.completed_at = datetime.now()
                    task.result_path = video_path
                    await session.commit()

                    # 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å)
                    try:
                        video_input = types.BufferedInputFile.from_file(video_path)
                        await bot.send_video(
                            chat_id=chat_id,
                            video=video_input,
                            caption=f"üé• –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {style.style_name}",
                            supports_streaming=True
                        )
                    except Exception as send_error:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {send_error}")
                        await bot.send_message(
                            chat_id=chat_id,
                            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )

                except Exception as e:
                    # 12. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    task.status_id = 4  # failed
                    task.completed_at = datetime.now()
                    await session.commit()

                    error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                    await bot.send_message(chat_id=chat_id, text=error_msg)
                    print(f"–û—à–∏–±–∫–∞ –¥–ª—è user {user_id}: {error_msg}")

            except Exception as e:
                await session.rollback()
                error_msg = f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}"
                await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                print(error_msg)

    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print(error_msg)
    finally:
        # 13. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user_temp_data.pop(user_id, None)
        progress_tracker.pop(user_id, None)


async def update_progress(user_id: int, progress: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if user_id not in progress_tracker:
        return

    tracker = progress_tracker[user_id]
    chat_id = tracker.get("chat_id")
    if not chat_id:
        return

    try:
        tracker["progress"] = progress

        if tracker.get("message_id") is None:
            return

        elapsed = int(time() - tracker["start_time"])
        remaining = int((100 - progress) * elapsed / max(1, progress))

        progress_text = (
            f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
            f"‚è± –ü—Ä–æ—à–ª–æ: {elapsed // 60} –º–∏–Ω {elapsed % 60} —Å–µ–∫\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining // 60} –º–∏–Ω"
        )

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=tracker["message_id"],
            text=progress_text
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")


async def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    async with async_session() as session:
        cutoff = datetime.now() - timedelta(days=7)
        await session.execute(delete(Upload).where(Upload.upload_time < cutoff))
        await session.commit()


async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–µ
        existing_statuses = await session.execute(select(TaskStatus))
        if not existing_statuses.scalars().all():
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            statuses = [
                {"id": 1, "status_name": "pending"},
                {"id": 2, "status_name": "processing"},
                {"id": 3, "status_name": "completed"},
                {"id": 4, "status_name": "failed"}
            ]

            for status in statuses:
                session.add(TaskStatus(**status))
            await session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        existing_styles = await session.execute(select(ProcessingStyle))
        if not existing_styles.scalars().all():
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
            styles = [
                {"style_name": "anime", "description": "–ê–Ω–∏–º–µ —Å—Ç–∏–ª—å"},
                {"style_name": "cyberpunk", "description": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª—å"},
                {"style_name": "impressionism", "description": "–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º"},
                {"style_name": "pixelart", "description": "–ü–∏–∫—Å–µ–ª–∏"}
            ]
            for style in styles:
                session.add(ProcessingStyle(**style))
            await session.commit()

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    scheduler.shutdown()
    await bot.session.close()

async def main():
    await on_startup()
    await dp.start_polling(bot)
    await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())